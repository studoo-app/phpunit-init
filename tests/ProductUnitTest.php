<?php

namespace App\Tests;

use App\Entity\Product;
use PHPUnit\Framework\TestCase;
use stdClass;

class ProductUnitTest extends TestCase
{
    private const TEST_VALUES = ["nom"=>"Dummy name","quantite"=>12,"description"=>"Lorem description"];

    private function makeProduct(): Product
    {
        $product = new Product();
        $product->setQuantite(self::TEST_VALUES["quantite"]);
        $product->setNom(self::TEST_VALUES["nom"]);
        $product->setDescription(self::TEST_VALUES["description"]);

        return $product;
    }

    public function testIdIsAutoGenerated(): void
    {
        $product = new Product();
        $this->assertNotEmpty($product->getId());
    }

    public function testIdIsInt(): void
    {
        $product = new Product();
        $this->assertIsInt($product->getId());
    }

    public function testDateIsAutoGenerated(): void
    {
        $product = new Product();
        $this->assertNotEmpty($product->getCreatedAt());
    }

    public function testDateIsDateTime(): void
    {
        $product = new Product();
        $this->AssertInstanceof(\DateTimeImmutable::class, $product->getCreatedAt());
    }

    public function testGetNom(){
        $product = $this->makeProduct();
        $this->assertEquals(self::TEST_VALUES["nom"],$product->getNom());
    }

    public function testSetNom(){
        $product = $this->makeProduct();
        $product->setNom("Test");
        $this->assertNotEquals(self::TEST_VALUES["nom"],$product->getNom());
        $this->assertEquals("Test",$product->getNom());
    }

    public function testSetWrongTypeNom(){
        $product = new Product();

        $values = [123,[],new StdClass()];
        foreach($values as $value){
            $this->expectException(\TypeError::class);
            $product->setNom($value);
        }

    }

    public function testGetQuantite(){
        $product = $this->makeProduct();
        $this->assertEquals(self::TEST_VALUES["quantite"],$product->getQuantite());
    }

    public function testSetQuantite(){
        $product = $this->makeProduct();
        $product->setQuantite(33);
        $this->assertNotEquals(self::TEST_VALUES["quantite"],$product->getQuantite());
        $this->assertEquals(33,$product->getQuantite());
    }

    public function testSetWrongTypeQuantite(){
        $product = new Product();

        $values = ["chainde texte",[],new StdClass()];
        foreach($values as $value){
            $this->expectException(\TypeError::class);
            $product->setQuantite($value);
        }

    }



    public function testGetDescription(){
        $product = $this->makeProduct();
        $this->assertEquals(self::TEST_VALUES["description"],$product->getDescription());
    }

    public function testSetDescription(){
        $product = $this->makeProduct();
        $product->setDescription("Lorem 2");
        $this->assertNotEquals(self::TEST_VALUES["description"],$product->getDescription());
        $this->assertEquals("Lorem 2",$product->getDescription());
    }

    public function testSetWrongTypeDescription(){
        $product = new Product();

        $values = [123,[],new StdClass()];
        foreach($values as $value){
            $this->expectException(\TypeError::class);
            $product->setDescription($value);
        }

    }




}
